{
	// Place your snippets for rust here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
    "Advent of Code boilerplate": {
        "prefix": "aoc",
        "body": [
            "use advent_of_code::get_challenge_input_as_str;",
            "",
            "#[allow(unused)]",
            "fn part_one(data: &str) -> i64 {",
            "    0",
            "}",
            "",
            "#[allow(unused)]",
            "fn part_two(data: &str) -> i64 {",
            "    0",
            "}",
            "",
            "pub fn main() {",
            "    if let Ok(data) = get_challenge_input_as_str($1, $2) {",
            "       let result = part_one(&data);",
            "       println!(\"part one: {}\", result);",
            "       let result = part_two(&data);",
            "       println!(\"part two: {}\", result);",
            "    }",
            "}",
            "",
            "",
            "mod tests {",
            "    #![allow(unused)]",
            "    use super::*;",
            "",
            "    const EXAMPLE_INPUT: &str = \"\";",
            "",
            "    #[test]",
            "    fn test_part_one() {",
            "    }",
            "",
            "    #[test]",
            "    fn test_part_two() {",
            "",
            "    }",
            "}"
        ],
        "description": "New Advent of Code boilerplate"
    }
}